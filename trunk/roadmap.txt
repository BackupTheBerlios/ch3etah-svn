Incremental builds (nightly/weekly):
 - Code compiles and Unit tests pass
 - No showstopper bugs
 - Documentation might be incomplete or inconsistent
Releases: (every 3-6 weeks)
 - Code compiles and Unit tests pass
 - No showstopper bugs
 - Documentation should be consistent

Some major features to be implemented:
http://msdn.microsoft.com/vstudio/teamsystem/Workshop/gat/default.aspx
http://msdn.microsoft.com/vstudio/teamsystem/Workshop/gat/intro.aspx
* Ability to check http://ch3etah.sf.net/version.xml for latest version
* Region support with hash code generation and checking (v0.6)
* Package Editing (v0.6)
* Bring back template editor w/ adhoc metadata entry and auto-preview (v0.6)
* Assembly analyzer for reverse engeneering (v0.6)
* Support for adhoc and runtime metadata (v0.7)
* Multiple file generation from one input XML using XPath to extract metadata (v0.7)
* Dynamic, configurable design support for strongly-typed metadata (v0.7)
* Metadata inheritance (a la XSD, for example w/ Entity/OREntity) (v0.7)
* SimpleEngine (v0.8)
* Better binding and change notification (v0.8)
* AppDomain isolation of template engines (at least NVelocity) (v0.8)
* Graphical DSL support similar to MS DSL Workbench and ObjectMapper (http://www.ddj.com/dept/architect/184429825) (v1+)
* Nant/MSBuild project files (v1+)
* Better support for adhoc template creation and use (without creating project) (v1+)

References
* http://www.ddj.com/dept/architect/184429825
* http://www.developerdotstar.com/mag/articles/o-r_mapping_persistence.html
* http://www.hanselminutes.com/default.aspx?showID=20
* http://www.devx.com/vstudioextensibility
* http://www.devx.com/vstudioextensibility/Article/31688 (Diff between Add-ins and Packages, which are more powerfull)
* http://msdn.microsoft.com/library/?url=/library/en-us/Extensibility_Guided_Tour/Redistribution.asp?frame=true (Redistributing VS integration packages)
* http://plas.fit.qut.edu.au/gppg/ (YACC Language Parser Generator)
* http://www.doitwith.net/CommentView.aspx?guid=39a0e537-5d0e-4f9b-ac5c-51e8b3d1d4ec (DXCore - free framework for developing VS extensibility projects)

*** NEED TO CREATE BACKUP SCRIPT FOR WEBSITE CONTENT AND WIKI THAT RUNS DAILY
BUG: If you right-click on a metadata file that could not be loaded, you get an exception so you can't remove the file except by editing the project XML file.
BUG: When you delete a node from the project tree (data source, command, metadata file) the deleted object's content editor window is not closed
BUG: Entity name doesn't update in treeview when changed in property grid
BUG: There is way too much coupling between the OREntityEditor and it's children (like accessing the TreeView on the Design editor). This really needs to be refactored. Same with MainForm.
BUG: It seems if you close the property grid, it doesn't show again through the menu
BUG: If a message box is displayed (eg. invalid project file name) while the splash screen is visible, the message box is hidden behind the splash.

* FEAT: Add drag and drop. Drag to titlebar opens text file/project. Drag to treeview can do different things depending on the target node and type of file.
* FEAT: Needs an addin for VS or integrated source control (because, for example people forget to add metadata files to source control). Perhaps a custom tool for CH3 files that checks if all of the project's referenced files are included in source control and throws a compile warning/error.
* FEAT: Add diffing (configurable) of files/regions when there is a mismatch
* FEAT: Add parameter to ORM settings to specify when database entity names are plural
* FEAT: When give user option to apply app-level ORM settings to all data sources in project
* FEAT: Add ability to check ch3etah.sf.net/version.xml for updates. Also store changelog and version info in xml files.
* FEAT: Add *.build and *.bat files to solution
* FEAT: When an entity is removed from the project, update links pointing to that entity.
* FEAT: Add visualization of legacy packages in project tree.
* FEAT: Nant script needs to copy changelog.txt to web directory
* FEAT: Should validate that links point to valid entities and warn if they don't (i.e. to avoid null ref exceptions when generating)
* FEAT: It really needs to be easier to create/edit packages with their included templates and sample projets
* FEAT: Add project-level parameters and project, metadata file, command, and template stencils to packages
* FEAT: Add data source CustomEntityAttributes to Package (and add a description to attributes)
* FEAT: Possibly add Description property to all key-value pairs
* FEAT: Rename Core.CodeGen.PackageLib.InputParameter to TemplateParameter and add a description
* FEAT: TemplateParameter needs to be able to accept typed values so that values other than string can be added to the generation context (similar to CodeSmith)
* FEAT: Need to implement configurable template loaders so that different engines can have specific features/functionality associated with their templates (like allowing CodeSmith templates to be parsed to find the required parameters)
* FEAT: Add evaluation syntax to allow metadata entities to be passed to generation context parameters as strongly typed objects rather than just XML ( ex: ${CurrentMetadataFile::Entity[0]} )
* FEAT: Add a "Rename" command to metadata file right click menu [possibly implement an INamedObject with SupportsRename() and Rename(string newName)]
* FEAT: Add support for Stored Procedure (SP) metadata for generating stron-typed data access commands. Should have option to use stored XML or refresh from DB every time code is generated (AutoRefreshSchema - possibly same for OREntities).
* FEAT: In ORM settings, add list of field names to exclude automatically, like SiteID, ReplicationID, etc.
* FEAT: Remove/Exclude deleted fields, indexes and links when entity is refreshed from db (or mark IsExcluded=true), and advise user (have option in settings)
* FEAT: Add ability to include/exclude nodes in entity editor tree via right-click
* FEAT: Parameterize naming of metadata files created from datasource
* FEAT: Put property browser below and put object editor forms to the side in MetadataFileEditor
* FEAT: Issue with toolbar buttons on entity editor screen
* FEAT: Add changed events to properties in project and metadata
* FEAT: Installer needs to make sure program isn't running
http://nsis.sourceforge.net/Check_whether_your_application_is_running_during_uninstallation
http://nsis.sourceforge.net/Detect_if_a_window_is_open_and_close_it.
* FEAT: We should look at migrating WeifenLuo docking suite to 1.0+. http://sourceforge.net/users/weifenluo/
* FEAT: Make the ID column on the bug report list a hyperlink to take you to the tracker page.
http://www.codeproject.com/cs/miscctrl/LinkLabelDatagridColumn.asp?df=100&forumid=226832&select=1447710#xx1447710xx
http://www.codeproject.com/vb/net/Datagrid_ColumnStyles.asp#xx1396971xx
* FEAT: Need support for different sources of metadata other than files, eg. "select Name, MessageTypeID from MessageType" that would be translated to XML at gentime and passed to the templates with other metadata. A source of metadata could even be an extraction, XPath and XSLT transform that takes metadata from a DB and transforms it to a particular format that then has strong-typed entities built on top of it.
* FEAT: Add pre and post-processors to codegen commands that can be written as C# or VB scripts (like NAnt custom tasks)

* WISH: Visual UML-style modeler. Should use Model-View-Presenter pattern and code to interfaces so that other types of metadata entities (e.g. XMI) can be plugged into the modeler.
* WISH: Manage multiple files in project structure (i.e. select several metadata files and remove them)
* WISH: Allow organizing of metadata files into sub directories
* WISH: We would like to have a simple Entity object and extend it with functionality and attributes such as O/R mapping, GUI-specific, framework-specific, etc. One possible way of acheiving this could be to use the decorator pattern or similar. We would need to figure out how the decorations would show up on editing screens, in property grid, etc. It would also be nice to have it configurable at runtime to make it easier to create/configure/discover/experiement with extending entities without having to create a VS.NET project for the extension and compile it.

============================================
Documentation Points
============================================
SEE: http://moinmoin.wikiwikiweb.de/SourceForge?highlight=%28SourceForge%29
- Getting started
  - Creating your first project (using one of the included sample packages)
  - Editing metadata files
  - Adjusting application and project-level settings
  - Adjusting data source settings
  - Adding a generator command to your project
- Authoring your own packages and templates 
  - Starting from one of the samples
  - Starting from scratch
- Authoring metadata types
  - Adhoc
  - Strongly typed
  - Creating editors
- Authoring data sources


