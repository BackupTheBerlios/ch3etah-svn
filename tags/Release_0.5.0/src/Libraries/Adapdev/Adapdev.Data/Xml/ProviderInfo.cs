//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Adapdev.Data.Xml {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ProvidersInfo : DataSet {
        
        private ProviderInfoDataTable tableProviderInfo;
        
        private TypeDataTable tableType;
        
        private DataRelation relationProviderInfo_Type;
        
        public ProvidersInfo() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ProvidersInfo(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ProviderInfo"] != null)) {
                    this.Tables.Add(new ProviderInfoDataTable(ds.Tables["ProviderInfo"]));
                }
                if ((ds.Tables["Type"] != null)) {
                    this.Tables.Add(new TypeDataTable(ds.Tables["Type"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProviderInfoDataTable ProviderInfo {
            get {
                return this.tableProviderInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TypeDataTable Type {
            get {
                return this.tableType;
            }
        }
        
        public override DataSet Clone() {
            ProvidersInfo cln = ((ProvidersInfo)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ProviderInfo"] != null)) {
                this.Tables.Add(new ProviderInfoDataTable(ds.Tables["ProviderInfo"]));
            }
            if ((ds.Tables["Type"] != null)) {
                this.Tables.Add(new TypeDataTable(ds.Tables["Type"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableProviderInfo = ((ProviderInfoDataTable)(this.Tables["ProviderInfo"]));
            if ((this.tableProviderInfo != null)) {
                this.tableProviderInfo.InitVars();
            }
            this.tableType = ((TypeDataTable)(this.Tables["Type"]));
            if ((this.tableType != null)) {
                this.tableType.InitVars();
            }
            this.relationProviderInfo_Type = this.Relations["ProviderInfo_Type"];
        }
        
        private void InitClass() {
            this.DataSetName = "ProvidersInfo";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProviderInfo.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableProviderInfo = new ProviderInfoDataTable();
            this.Tables.Add(this.tableProviderInfo);
            this.tableType = new TypeDataTable();
            this.Tables.Add(this.tableType);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("ProviderInfo_Type", new DataColumn[] {
                        this.tableProviderInfo.ProviderInfo_IdColumn}, new DataColumn[] {
                        this.tableType.ProviderInfo_IdColumn});
            this.tableType.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationProviderInfo_Type = new DataRelation("ProviderInfo_Type", new DataColumn[] {
                        this.tableProviderInfo.ProviderInfo_IdColumn}, new DataColumn[] {
                        this.tableType.ProviderInfo_IdColumn}, false);
            this.relationProviderInfo_Type.Nested = true;
            this.Relations.Add(this.relationProviderInfo_Type);
        }
        
        private bool ShouldSerializeProviderInfo() {
            return false;
        }
        
        private bool ShouldSerializeType() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ProviderInfoRowChangeEventHandler(object sender, ProviderInfoRowChangeEvent e);
        
        public delegate void TypeRowChangeEventHandler(object sender, TypeRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProviderInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnProviderInfo_Id;
            
            internal ProviderInfoDataTable() : 
                    base("ProviderInfo") {
                this.InitClass();
            }
            
            internal ProviderInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ProviderInfo_IdColumn {
                get {
                    return this.columnProviderInfo_Id;
                }
            }
            
            public ProviderInfoRow this[int index] {
                get {
                    return ((ProviderInfoRow)(this.Rows[index]));
                }
            }
            
            public event ProviderInfoRowChangeEventHandler ProviderInfoRowChanged;
            
            public event ProviderInfoRowChangeEventHandler ProviderInfoRowChanging;
            
            public event ProviderInfoRowChangeEventHandler ProviderInfoRowDeleted;
            
            public event ProviderInfoRowChangeEventHandler ProviderInfoRowDeleting;
            
            public void AddProviderInfoRow(ProviderInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ProviderInfoRow AddProviderInfoRow(string Name) {
                ProviderInfoRow rowProviderInfoRow = ((ProviderInfoRow)(this.NewRow()));
                rowProviderInfoRow.ItemArray = new object[] {
                        Name,
                        null};
                this.Rows.Add(rowProviderInfoRow);
                return rowProviderInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProviderInfoDataTable cln = ((ProviderInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProviderInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnProviderInfo_Id = this.Columns["ProviderInfo_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnProviderInfo_Id = new DataColumn("ProviderInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProviderInfo_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnProviderInfo_Id}, true));
                this.columnName.Namespace = "";
                this.columnProviderInfo_Id.AutoIncrement = true;
                this.columnProviderInfo_Id.AllowDBNull = false;
                this.columnProviderInfo_Id.Unique = true;
            }
            
            public ProviderInfoRow NewProviderInfoRow() {
                return ((ProviderInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProviderInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProviderInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProviderInfoRowChanged != null)) {
                    this.ProviderInfoRowChanged(this, new ProviderInfoRowChangeEvent(((ProviderInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProviderInfoRowChanging != null)) {
                    this.ProviderInfoRowChanging(this, new ProviderInfoRowChangeEvent(((ProviderInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProviderInfoRowDeleted != null)) {
                    this.ProviderInfoRowDeleted(this, new ProviderInfoRowChangeEvent(((ProviderInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProviderInfoRowDeleting != null)) {
                    this.ProviderInfoRowDeleting(this, new ProviderInfoRowChangeEvent(((ProviderInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProviderInfoRow(ProviderInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProviderInfoRow : DataRow {
            
            private ProviderInfoDataTable tableProviderInfo;
            
            internal ProviderInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProviderInfo = ((ProviderInfoDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableProviderInfo.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProviderInfo.NameColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableProviderInfo.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableProviderInfo.NameColumn] = System.Convert.DBNull;
            }
            
            public TypeRow[] GetTypeRows() {
                return ((TypeRow[])(this.GetChildRows(this.Table.ChildRelations["ProviderInfo_Type"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProviderInfoRowChangeEvent : EventArgs {
            
            private ProviderInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProviderInfoRowChangeEvent(ProviderInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProviderInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnName;
            
            private DataColumn columnObject;
            
            private DataColumn columnPrefix;
            
            private DataColumn columnPostfix;
            
            private DataColumn columnDefault;
            
            private DataColumn columnTestDefault;
            
            private DataColumn columnProviderInfo_Id;
            
            internal TypeDataTable() : 
                    base("Type") {
                this.InitClass();
            }
            
            internal TypeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ObjectColumn {
                get {
                    return this.columnObject;
                }
            }
            
            internal DataColumn PrefixColumn {
                get {
                    return this.columnPrefix;
                }
            }
            
            internal DataColumn PostfixColumn {
                get {
                    return this.columnPostfix;
                }
            }
            
            internal DataColumn DefaultColumn {
                get {
                    return this.columnDefault;
                }
            }
            
            internal DataColumn TestDefaultColumn {
                get {
                    return this.columnTestDefault;
                }
            }
            
            internal DataColumn ProviderInfo_IdColumn {
                get {
                    return this.columnProviderInfo_Id;
                }
            }
            
            public TypeRow this[int index] {
                get {
                    return ((TypeRow)(this.Rows[index]));
                }
            }
            
            public event TypeRowChangeEventHandler TypeRowChanged;
            
            public event TypeRowChangeEventHandler TypeRowChanging;
            
            public event TypeRowChangeEventHandler TypeRowDeleted;
            
            public event TypeRowChangeEventHandler TypeRowDeleting;
            
            public void AddTypeRow(TypeRow row) {
                this.Rows.Add(row);
            }
            
            public TypeRow AddTypeRow(string Id, string Name, string Object, string Prefix, string Postfix, string Default, string TestDefault, ProviderInfoRow parentProviderInfoRowByProviderInfo_Type) {
                TypeRow rowTypeRow = ((TypeRow)(this.NewRow()));
                rowTypeRow.ItemArray = new object[] {
                        Id,
                        Name,
                        Object,
                        Prefix,
                        Postfix,
                        Default,
                        TestDefault,
                        parentProviderInfoRowByProviderInfo_Type[1]};
                this.Rows.Add(rowTypeRow);
                return rowTypeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TypeDataTable cln = ((TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TypeDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnName = this.Columns["Name"];
                this.columnObject = this.Columns["Object"];
                this.columnPrefix = this.Columns["Prefix"];
                this.columnPostfix = this.Columns["Postfix"];
                this.columnDefault = this.Columns["Default"];
                this.columnTestDefault = this.Columns["TestDefault"];
                this.columnProviderInfo_Id = this.Columns["ProviderInfo_Id"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnObject = new DataColumn("Object", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObject);
                this.columnPrefix = new DataColumn("Prefix", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrefix);
                this.columnPostfix = new DataColumn("Postfix", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostfix);
                this.columnDefault = new DataColumn("Default", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDefault);
                this.columnTestDefault = new DataColumn("TestDefault", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTestDefault);
                this.columnProviderInfo_Id = new DataColumn("ProviderInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProviderInfo_Id);
            }
            
            public TypeRow NewTypeRow() {
                return ((TypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TypeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TypeRowChanged != null)) {
                    this.TypeRowChanged(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TypeRowChanging != null)) {
                    this.TypeRowChanging(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TypeRowDeleted != null)) {
                    this.TypeRowDeleted(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TypeRowDeleting != null)) {
                    this.TypeRowDeleting(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTypeRow(TypeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeRow : DataRow {
            
            private TypeDataTable tableType;
            
            internal TypeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableType = ((TypeDataTable)(this.Table));
            }
            
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tableType.IdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableType.IdColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableType.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableType.NameColumn] = value;
                }
            }
            
            public string Object {
                get {
                    try {
                        return ((string)(this[this.tableType.ObjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableType.ObjectColumn] = value;
                }
            }
            
            public string Prefix {
                get {
                    try {
                        return ((string)(this[this.tableType.PrefixColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableType.PrefixColumn] = value;
                }
            }
            
            public string Postfix {
                get {
                    try {
                        return ((string)(this[this.tableType.PostfixColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableType.PostfixColumn] = value;
                }
            }
            
            public string Default {
                get {
                    try {
                        return ((string)(this[this.tableType.DefaultColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableType.DefaultColumn] = value;
                }
            }
            
            public string TestDefault {
                get {
                    try {
                        return ((string)(this[this.tableType.TestDefaultColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableType.TestDefaultColumn] = value;
                }
            }
            
            public ProviderInfoRow ProviderInfoRow {
                get {
                    return ((ProviderInfoRow)(this.GetParentRow(this.Table.ParentRelations["ProviderInfo_Type"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProviderInfo_Type"]);
                }
            }
            
            public bool IsIdNull() {
                return this.IsNull(this.tableType.IdColumn);
            }
            
            public void SetIdNull() {
                this[this.tableType.IdColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableType.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableType.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsObjectNull() {
                return this.IsNull(this.tableType.ObjectColumn);
            }
            
            public void SetObjectNull() {
                this[this.tableType.ObjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrefixNull() {
                return this.IsNull(this.tableType.PrefixColumn);
            }
            
            public void SetPrefixNull() {
                this[this.tableType.PrefixColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostfixNull() {
                return this.IsNull(this.tableType.PostfixColumn);
            }
            
            public void SetPostfixNull() {
                this[this.tableType.PostfixColumn] = System.Convert.DBNull;
            }
            
            public bool IsDefaultNull() {
                return this.IsNull(this.tableType.DefaultColumn);
            }
            
            public void SetDefaultNull() {
                this[this.tableType.DefaultColumn] = System.Convert.DBNull;
            }
            
            public bool IsTestDefaultNull() {
                return this.IsNull(this.tableType.TestDefaultColumn);
            }
            
            public void SetTestDefaultNull() {
                this[this.tableType.TestDefaultColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeRowChangeEvent : EventArgs {
            
            private TypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public TypeRowChangeEvent(TypeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
